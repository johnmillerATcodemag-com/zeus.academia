// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Zeus.Academia.Infrastructure.Data;

#nullable disable

namespace Zeus.Academia.Infrastructure.Migrations
{
    [DbContext(typeof(AcademiaDbContext))]
    [Migration("20251003020100_Prompt5Task4_DepartmentAdministration")]
    partial class Prompt5Task4_DepartmentAdministration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Academic", b =>
                {
                    b.Property<int>("EmpNr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmpNr"));

                    b.Property<string>("AcademicType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("EmpNr");

                    b.HasIndex("Name");

                    b.HasIndex("PhoneNumber");

                    b.ToTable("Academics");

                    b.HasDiscriminator<string>("AcademicType").HasValue("Academic");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.AcademicAdvisor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdvisorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentStudentCount")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FacultyEmpNr")
                        .HasColumnType("int");

                    b.Property<bool>("IsAcceptingNewStudents")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("MaxStudentLoad")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("OfficeHours")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OfficeLocation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PreferredContactMethod")
                        .HasColumnType("int");

                    b.Property<string>("Specializations")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentName")
                        .HasDatabaseName("IX_AcademicAdvisors_DepartmentName");

                    b.HasIndex("FacultyEmpNr")
                        .IsUnique()
                        .HasDatabaseName("IX_AcademicAdvisors_FacultyEmpNr")
                        .HasFilter("[FacultyEmpNr] IS NOT NULL");

                    b.HasIndex("IsAcceptingNewStudents")
                        .HasDatabaseName("IX_AcademicAdvisors_AcceptingNewStudents");

                    b.ToTable("AcademicAdvisors", t =>
                        {
                            t.HasCheckConstraint("CK_AcademicAdvisors_Capacity", "MaxStudentLoad >= 1 OR MaxStudentLoad IS NULL");

                            t.HasCheckConstraint("CK_AcademicAdvisors_CurrentLoad", "CurrentStudentLoad >= 0");
                        });
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.AcademicDegree", b =>
                {
                    b.Property<int>("AcademicEmpNr")
                        .HasColumnType("int");

                    b.Property<string>("DegreeCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UniversityCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateObtained")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AcademicEmpNr", "DegreeCode", "UniversityCode");

                    b.HasIndex("DegreeCode");

                    b.HasIndex("UniversityCode");

                    b.ToTable("AcademicDegrees");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.AcademicHonor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcademicTermId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicYear")
                        .HasColumnType("int");

                    b.Property<bool>("AppearsOnTranscript")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("AwardDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AwardingOrganization")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("HonorType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("MinimumCreditHours")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("RequiredGPA")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("Semester")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StudentEmpNr")
                        .HasColumnType("int");

                    b.Property<decimal?>("StudentGPA")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicTermId");

                    b.HasIndex("StudentEmpNr")
                        .HasDatabaseName("IX_AcademicHonors_StudentEmpNr");

                    b.HasIndex("StudentEmpNr", "AcademicYear")
                        .HasDatabaseName("IX_AcademicHonors_Student_Year");

                    b.ToTable("AcademicHonors");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.AcademicRank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicEmpNr")
                        .HasColumnType("int");

                    b.Property<decimal?>("AnnualSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AppointmentPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("AssignmentReason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CollegeCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsCurrentRank")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSabbaticalEligible")
                        .HasColumnType("bit");

                    b.Property<int?>("MinimumYearsInRank")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NextReviewDate")
                        .HasColumnType("date");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("PromotionCommitteeId")
                        .HasColumnType("int");

                    b.Property<string>("RankCategory")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RankLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RankQualifications")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SalaryGrade")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TenureStatus")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("VotingRights")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicEmpNr")
                        .HasDatabaseName("IX_AcademicRank_Academic");

                    b.HasIndex("PromotionCommitteeId");

                    b.HasIndex("RankLevel")
                        .HasDatabaseName("IX_AcademicRank_RankLevel");

                    b.HasIndex("TenureStatus")
                        .HasDatabaseName("IX_AcademicRank_TenureStatus");

                    b.HasIndex("AcademicEmpNr", "IsCurrentRank")
                        .HasDatabaseName("IX_AcademicRank_Academic_Current");

                    b.ToTable("AcademicRanks");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.AcademicTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicYear")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApplicationDeadline")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ApplicationsOpen")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DropDeadline")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EarlyApplicationDeadline")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnrollmentDeadline")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EnrollmentOpen")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EnrollmentStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LateEnrollmentDeadline")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("LateEnrollmentFee")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int?>("MaxCreditsPerStudent")
                        .HasColumnType("int");

                    b.Property<int?>("MinCreditsFullTime")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TermCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TermName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TermType")
                        .HasColumnType("int");

                    b.Property<decimal?>("TuitionAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("WithdrawDeadline")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYear")
                        .HasDatabaseName("IX_AcademicTerms_AcademicYear");

                    b.HasIndex("ApplicationsOpen")
                        .HasDatabaseName("IX_AcademicTerms_ApplicationsOpen");

                    b.HasIndex("EnrollmentOpen")
                        .HasDatabaseName("IX_AcademicTerms_EnrollmentOpen");

                    b.HasIndex("TermCode")
                        .IsUnique()
                        .HasDatabaseName("IX_AcademicTerms_TermCode");

                    b.HasIndex("TermType")
                        .HasDatabaseName("IX_AcademicTerms_TermType");

                    b.HasIndex("IsActive", "IsCurrent")
                        .HasDatabaseName("IX_AcademicTerms_Active_Current");

                    b.ToTable("AcademicTerms", null, t =>
                        {
                            t.HasCheckConstraint("CK_AcademicTerms_ApplicationDates", "ApplicationDeadline IS NULL OR ApplicationDeadline <= StartDate");

                            t.HasCheckConstraint("CK_AcademicTerms_Dates", "EndDate > StartDate");

                            t.HasCheckConstraint("CK_AcademicTerms_EarlyApplication", "EarlyApplicationDeadline IS NULL OR ApplicationDeadline IS NULL OR EarlyApplicationDeadline <= ApplicationDeadline");
                        });
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.AccessLevel", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("CanAccessFacultyRecords")
                        .HasColumnType("bit");

                    b.Property<bool>("CanAccessFinancial")
                        .HasColumnType("bit");

                    b.Property<bool>("CanAccessStudentRecords")
                        .HasColumnType("bit");

                    b.Property<bool>("CanCreate")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("CanExecute")
                        .HasColumnType("bit");

                    b.Property<bool>("CanGenerateReports")
                        .HasColumnType("bit");

                    b.Property<bool>("CanModifySystem")
                        .HasColumnType("bit");

                    b.Property<bool>("CanRead")
                        .HasColumnType("bit");

                    b.Property<bool>("CanUpdate")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("Level")
                        .HasColumnType("int");

                    b.Property<int?>("MaxConcurrentSessions")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PasswordChangeFrequencyDays")
                        .HasColumnType("int");

                    b.Property<bool>("RequiresPasswordChange")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresTwoFactor")
                        .HasColumnType("bit");

                    b.Property<int?>("SessionTimeoutMinutes")
                        .HasColumnType("int");

                    b.Property<string>("SpecialPermissions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Code");

                    b.HasIndex("Category");

                    b.HasIndex("IsActive");

                    b.HasIndex("Level");

                    b.HasIndex("Category", "Level");

                    b.ToTable("AccessLevels", t =>
                        {
                            t.HasCheckConstraint("CK_AccessLevel_Level", "Level >= 1 AND Level <= 100 OR Level IS NULL");

                            t.HasCheckConstraint("CK_AccessLevel_Sessions", "MaxConcurrentSessions >= 1 OR MaxConcurrentSessions IS NULL");
                        });
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.AdministrativeAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActualCourseReleaseCount")
                        .HasColumnType("int");

                    b.Property<decimal?>("ActualSalary")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("AdministrativeEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("AdministrativeStipend")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("AnnouncementDate")
                        .HasColumnType("date");

                    b.Property<string>("AppointedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AppointmentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AppointmentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AppointmentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("AssigneeEmpNr")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AssignmentEndDate")
                        .HasColumnType("date");

                    b.Property<string>("AssignmentGoals")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("AssignmentStartDate")
                        .HasColumnType("date");

                    b.Property<string>("ChangeReason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("date");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DirectPhoneLine")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ExecutiveAssistantName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("HasExecutiveAssistant")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<string>("KeyPerformanceIndicators")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("LastPerformanceReview")
                        .HasColumnType("date");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NextPerformanceReview")
                        .HasColumnType("date");

                    b.Property<string>("OfficeLocation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PerformanceNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ReportingUnit")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RoleCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SuccessionPlan")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("TermLengthYears")
                        .HasColumnType("int");

                    b.Property<int>("TermNumber")
                        .HasColumnType("int");

                    b.Property<string>("TransitionNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeEmpNr");

                    b.HasIndex("RoleCode");

                    b.ToTable("AdministrativeAssignments");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.AdministrativeRole", b =>
                {
                    b.Property<string>("RoleCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AdditionalBenefits")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("AdministrativeStipend")
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("AuthorityScope")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("BaseSalaryRangeMax")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("BaseSalaryRangeMin")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("BudgetAuthority")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int?>("CourseReleaseCount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EstablishedDate")
                        .HasColumnType("date");

                    b.Property<int>("HierarchyLevel")
                        .HasColumnType("int");

                    b.Property<string>("HiringAuthority")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IncludesAdminSupport")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludesCourseRelease")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludesTenure")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("KeyResponsibilities")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("MaxConsecutiveTerms")
                        .HasColumnType("int");

                    b.Property<string>("MinimumRankRequired")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("MinimumYearsExperience")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportsTo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("RequiresFacultyStatus")
                        .HasColumnType("bit");

                    b.Property<string>("RoleCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RoleDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RoleTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SpecialQualifications")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SupervisesRoles")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TypicalTermLength")
                        .HasColumnType("int");

                    b.HasKey("RoleCode");

                    b.ToTable("AdministrativeRoles");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.ApplicationDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("MimeType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("UploadDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("VerificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId")
                        .HasDatabaseName("IX_ApplicationDocuments_ApplicationId");

                    b.HasIndex("DocumentType")
                        .HasDatabaseName("IX_ApplicationDocuments_DocumentType");

                    b.HasIndex("IsRequired")
                        .HasDatabaseName("IX_ApplicationDocuments_IsRequired");

                    b.ToTable("ApplicationDocuments", (string)null);
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Award", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcademicTermId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicYear")
                        .HasColumnType("int");

                    b.Property<bool>("AppearsOnTranscript")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("AwardDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AwardType")
                        .HasColumnType("int");

                    b.Property<string>("AwardingOrganization")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CertificateNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Criteria")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("USD");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsRecurring")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("MonetaryValue")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RecurrenceFrequency")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StudentEmpNr")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicTermId");

                    b.HasIndex("StudentEmpNr")
                        .HasDatabaseName("IX_Awards_StudentEmpNr");

                    b.HasIndex("StudentEmpNr", "AcademicYear")
                        .HasDatabaseName("IX_Awards_Student_Year");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Building", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BuildingManager")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BuildingType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("ConstructionYear")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EmergencyContact")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("HasElevator")
                        .HasColumnType("bit");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccessible")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("NumberOfFloors")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("TotalAreaSqFt")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Code");

                    b.HasIndex("BuildingType");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.ToTable("Buildings", t =>
                        {
                            t.HasCheckConstraint("CK_Building_Area", "TotalAreaSqFt >= 0 OR TotalAreaSqFt IS NULL");

                            t.HasCheckConstraint("CK_Building_Floors", "NumberOfFloors >= 1 OR NumberOfFloors IS NULL");
                        });
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Chair", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("AcademicEmpNr")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AppointmentEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AppointmentStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Name");

                    b.HasIndex("AcademicEmpNr");

                    b.HasIndex("DepartmentName");

                    b.ToTable("Chairs");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Committee", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Name");

                    b.ToTable("Committees");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.CommitteeChair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppointedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("AppointmentEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("AppointmentStartDate")
                        .HasColumnType("date");

                    b.Property<string>("AppointmentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ChairContactInfo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ChairEmpNr")
                        .HasColumnType("int");

                    b.Property<decimal?>("ChairStipend")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ChangeReason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CommitteeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ConsecutiveTermNumber")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEligibleForRenewal")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastReviewDate")
                        .HasColumnType("date");

                    b.Property<string>("LeadershipApproach")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("MaxConsecutiveTerms")
                        .HasColumnType("int");

                    b.Property<string>("MeetingFormat")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MeetingFrequency")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PerformanceNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("ReceivesAdminSupport")
                        .HasColumnType("bit");

                    b.Property<string>("SelectionMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SpecialResponsibilities")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TermGoals")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("TermLengthYears")
                        .HasColumnType("int");

                    b.Property<int?>("TotalVotesCast")
                        .HasColumnType("int");

                    b.Property<string>("TransitionNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("VotesReceived")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChairEmpNr");

                    b.HasIndex("CommitteeName");

                    b.ToTable("CommitteeChairs");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.CommitteeLeadership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicEmpNr")
                        .HasColumnType("int");

                    b.Property<string>("AppointedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeReason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CommitteeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AcademicEmpNr")
                        .HasDatabaseName("IX_CommitteeLeadership_Academic");

                    b.HasIndex("CommitteeName")
                        .HasDatabaseName("IX_CommitteeLeadership_Committee");

                    b.HasIndex("IsCurrent")
                        .HasDatabaseName("IX_CommitteeLeadership_Current");

                    b.HasIndex("CommitteeName", "Position", "IsCurrent")
                        .HasDatabaseName("IX_CommitteeLeadership_Committee_Position_Current");

                    b.ToTable("CommitteeLeadership");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.CommitteeMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicEmpNr")
                        .HasColumnType("int");

                    b.Property<string>("CommitteeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProfessorEmpNr")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TeachingProfEmpNr")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicEmpNr");

                    b.HasIndex("CommitteeName");

                    b.HasIndex("ProfessorEmpNr");

                    b.HasIndex("TeachingProfEmpNr");

                    b.ToTable("CommitteeMembers");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.CommitteeMemberAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppointedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("AppointmentEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("AppointmentStartDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("AttendancePercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AvailabilityConstraints")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ChangeReason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CommitteeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ConsecutiveTermNumber")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExpertiseArea")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEligibleForRenewal")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxConsecutiveTerms")
                        .HasColumnType("int");

                    b.Property<int>("MeetingsAttended")
                        .HasColumnType("int");

                    b.Property<int>("MemberEmpNr")
                        .HasColumnType("int");

                    b.Property<string>("MemberRole")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PerformanceNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("PreferredContactMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RepresentingUnit")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SelectionMethod")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SpecificResponsibilities")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("TermLengthYears")
                        .HasColumnType("int");

                    b.Property<int>("TotalMeetingsHeld")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommitteeName");

                    b.HasIndex("MemberEmpNr");

                    b.ToTable("CommitteeMemberAssignments");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.CourseEnrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcademicTermId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicYear")
                        .HasColumnType("int");

                    b.Property<bool>("CountsTowardDegree")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CreditHours")
                        .HasPrecision(4, 1)
                        .HasColumnType("decimal(4,1)");

                    b.Property<DateTime?>("DropDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAudit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SectionId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Semester")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StudentEmpNr")
                        .HasColumnType("int");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("WithdrawalDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AcademicTermId");

                    b.HasIndex("StudentEmpNr")
                        .HasDatabaseName("IX_CourseEnrollments_StudentEmpNr");

                    b.HasIndex("SubjectCode")
                        .HasDatabaseName("IX_CourseEnrollments_SubjectCode");

                    b.HasIndex("StudentEmpNr", "AcademicYear", "Semester")
                        .HasDatabaseName("IX_CourseEnrollments_Student_Term");

                    b.ToTable("CourseEnrollments");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Degree", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("DurationYears")
                        .HasColumnType("decimal(3,1)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("MinimumGPA")
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PrimaryDepartment")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Specialization")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TotalCreditHours")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("IsActive");

                    b.HasIndex("Level");

                    b.HasIndex("Level", "PrimaryDepartment");

                    b.ToTable("Degrees", t =>
                        {
                            t.HasCheckConstraint("CK_Degree_MinimumGPA", "MinimumGPA >= 1.0 AND MinimumGPA <= 4.0 OR MinimumGPA IS NULL");
                        });
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.DegreeProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalRequirements")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("CapstoneCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("CompletedCreditHours")
                        .HasPrecision(6, 1)
                        .HasColumnType("decimal(6,1)");

                    b.Property<decimal>("CompletionPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("CoreRequirementsCompleted")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CumulativeGPA")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("DegreeCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("ElectiveRequirementsCompleted")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpectedGraduationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("InternshipCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("MajorGPA")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<bool>("MeetsGPARequirement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("PrerequisitesMet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ProjectedGraduationTerm")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("RemainingCreditHours")
                        .HasPrecision(6, 1)
                        .HasColumnType("decimal(6,1)");

                    b.Property<int>("RequiredCreditHours")
                        .HasColumnType("int");

                    b.Property<decimal>("RequiredGPA")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(2.0m);

                    b.Property<int>("StudentEmpNr")
                        .HasColumnType("int");

                    b.Property<bool?>("ThesisCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("TotalCoreRequirements")
                        .HasColumnType("int");

                    b.Property<int>("TotalElectiveRequirements")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DegreeCode")
                        .HasDatabaseName("IX_DegreeProgress_DegreeCode");

                    b.HasIndex("ExpectedGraduationDate")
                        .HasDatabaseName("IX_DegreeProgress_ExpectedGraduation");

                    b.HasIndex("StudentEmpNr")
                        .IsUnique()
                        .HasDatabaseName("IX_DegreeProgress_StudentEmpNr");

                    b.ToTable("DegreeProgresses");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Department", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<decimal?>("Budget")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("EstablishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("HeadEmpNr")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Name");

                    b.HasIndex("EstablishedDate");

                    b.HasIndex("HeadEmpNr");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.DepartmentChair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalBenefits")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("AnnouncementDate")
                        .HasColumnType("date");

                    b.Property<string>("AppointedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("AppointmentEndDate")
                        .HasColumnType("date");

                    b.Property<string>("AppointmentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AppointmentStartDate")
                        .HasColumnType("date");

                    b.Property<string>("AppointmentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("ChairStipend")
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("ChangeReason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CourseReleaseCount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("FacultyEmpNr")
                        .HasColumnType("int");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEligibleForRenewal")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastReviewDate")
                        .HasColumnType("date");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NextReviewDate")
                        .HasColumnType("date");

                    b.Property<string>("PerformanceNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("ReceivesCourseRelease")
                        .HasColumnType("bit");

                    b.Property<string>("SpecialResponsibilities")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("TermLengthYears")
                        .HasColumnType("int");

                    b.Property<int>("TermNumber")
                        .HasColumnType("int");

                    b.Property<string>("TransitionNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentName");

                    b.HasIndex("FacultyEmpNr");

                    b.ToTable("DepartmentChairs");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.DepartmentalService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<decimal?>("ActualHoursLogged")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("AdminSupportDetails")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("AnnualReviewRating")
                        .HasColumnType("int");

                    b.Property<string>("AppointedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AppointmentMethod")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("BudgetOversight")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("ChallengesFaced")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("CompensationAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("date");

                    b.Property<bool>("CountsTowardPromotion")
                        .HasColumnType("bit");

                    b.Property<int>("CourseReleaseCount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<decimal?>("EstimatedHoursPerYear")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("FacultyEmpNr")
                        .HasColumnType("int");

                    b.Property<bool>("FulfillsTenureRequirements")
                        .HasColumnType("bit");

                    b.Property<string>("FutureServiceRecommendations")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IncludesLeadership")
                        .HasColumnType("bit");

                    b.Property<bool>("InvolvesBudgetOversight")
                        .HasColumnType("bit");

                    b.Property<bool>("InvolvesExternalStakeholders")
                        .HasColumnType("bit");

                    b.Property<bool>("InvolvesStudentInteractions")
                        .HasColumnType("bit");

                    b.Property<bool>("InvolvestPersonnelDecisions")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("KeyResponsibilities")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("LastReviewDate")
                        .HasColumnType("date");

                    b.Property<string>("MajorAccomplishments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("MeetingFrequency")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MeetingsAttended")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Organization")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PerformanceEvaluation")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("ReceivesAdminSupport")
                        .HasColumnType("bit");

                    b.Property<bool>("ReceivesCompensation")
                        .HasColumnType("bit");

                    b.Property<bool>("ReceivesCourseRelease")
                        .HasColumnType("bit");

                    b.Property<string>("RecognitionReceived")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ServiceCategory")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ServiceEndDate")
                        .HasColumnType("date");

                    b.Property<string>("ServiceImpact")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ServiceLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ServiceNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ServiceRole")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ServiceStartDate")
                        .HasColumnType("date");

                    b.Property<string>("ServiceTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal?>("ServiceWeight")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("SkillsGained")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TerminationReason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TotalMeetingsScheduled")
                        .HasColumnType("int");

                    b.Property<string>("TransitionNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("WillServeAgain")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentName");

                    b.HasIndex("FacultyEmpNr");

                    b.ToTable("DepartmentalServices");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.EmergencyContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("United States");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("FerpaAuthorized")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastVerifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("NotifyForAcademicIssues")
                        .HasColumnType("bit");

                    b.Property<bool>("NotifyForFinancialMatters")
                        .HasColumnType("bit");

                    b.Property<bool>("NotifyInEmergency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PreferredContactMethod")
                        .HasColumnType("int");

                    b.Property<string>("PrimaryPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecondaryPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StudentEmpNr")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentEmpNr")
                        .HasDatabaseName("IX_EmergencyContacts_StudentEmpNr");

                    b.HasIndex("StudentEmpNr", "Priority")
                        .HasDatabaseName("IX_EmergencyContacts_Student_Priority");

                    b.ToTable("EmergencyContacts", t =>
                        {
                            t.HasCheckConstraint("CK_EmergencyContacts_Priority", "Priority >= 1 AND Priority <= 10");
                        });
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.EnrollmentApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AcademicTerm")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("AcademicTermId")
                        .HasColumnType("int");

                    b.Property<int?>("AcademicYear")
                        .HasColumnType("int");

                    b.Property<int?>("ApplicantEmpNr")
                        .HasColumnType("int");

                    b.Property<string>("ApplicantName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ApplicationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Decision")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DecisionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DecisionMadeBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DecisionReason")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("DocumentsComplete")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ExpectedEnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsInternationalStudent")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("PreviousGPA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PreviousGraduationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PreviousInstitution")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Program")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("RequiresFinancialAid")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SubmittedDocuments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicTermId");

                    b.HasIndex("ApplicantEmpNr");

                    b.HasIndex("ApplicationDate")
                        .HasDatabaseName("IX_EnrollmentApplications_ApplicationDate");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_EnrollmentApplications_Email");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_EnrollmentApplications_Status");

                    b.HasIndex("DepartmentName", "Status")
                        .HasDatabaseName("IX_EnrollmentApplications_Department_Status");

                    b.ToTable("EnrollmentApplications", (string)null);
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.EnrollmentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AcademicTerm")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("AcademicTermId")
                        .HasColumnType("int");

                    b.Property<int?>("AcademicYear")
                        .HasColumnType("int");

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EventDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<bool>("IsSystemGenerated")
                        .HasColumnType("bit");

                    b.Property<string>("Metadata")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewStatus")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NotificationSent")
                        .HasColumnType("bit");

                    b.Property<int?>("PreviousStatus")
                        .HasColumnType("int");

                    b.Property<string>("ProcessedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Program")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Reason")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("StudentEmpNr")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicTermId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("DepartmentName");

                    b.HasIndex("EventDate")
                        .HasDatabaseName("IX_EnrollmentHistory_EventDate");

                    b.HasIndex("EventType")
                        .HasDatabaseName("IX_EnrollmentHistory_EventType");

                    b.HasIndex("StudentEmpNr")
                        .HasDatabaseName("IX_EnrollmentHistory_StudentEmpNr");

                    b.HasIndex("StudentEmpNr", "EventDate")
                        .HasDatabaseName("IX_EnrollmentHistory_Student_Date");

                    b.ToTable("EnrollmentHistory", (string)null);
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Extension", b =>
                {
                    b.Property<string>("Number")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("AllowsForwarding")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("HasVoicemail")
                        .HasColumnType("bit");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InstallationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastServiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OperatingHours")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrimaryContact")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<int?>("ResponsibleEmployeeNr")
                        .HasColumnType("int");

                    b.Property<string>("SpecialInstructions")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Number");

                    b.HasIndex("Department");

                    b.HasIndex("IsActive");

                    b.HasIndex("ResponsibleEmployeeNr");

                    b.HasIndex("Type");

                    b.ToTable("Extensions");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.FacultyDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicEmpNr")
                        .HasColumnType("int");

                    b.Property<string>("AccessLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ArchiveReason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DownloadCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FacultyProfileId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCurrentVersion")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDownloadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Metadata")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("MimeType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalFileName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("VersionNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicEmpNr")
                        .HasDatabaseName("IX_FacultyDocument_Academic");

                    b.HasIndex("DocumentType")
                        .HasDatabaseName("IX_FacultyDocument_Type");

                    b.HasIndex("FacultyProfileId");

                    b.HasIndex("IsCurrentVersion")
                        .HasDatabaseName("IX_FacultyDocument_Current");

                    b.HasIndex("AcademicEmpNr", "DocumentType", "IsCurrentVersion")
                        .HasDatabaseName("IX_FacultyDocument_Academic_Type_Current");

                    b.ToTable("FacultyDocuments");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.FacultyEmploymentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicEmpNr")
                        .HasColumnType("int");

                    b.Property<decimal?>("AnnualSalary")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ChangeReason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ContractType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("EmploymentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("FtePercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsCurrentPosition")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PositionTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("ResearchExpectationPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("ServiceExpectationPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("TeachingLoadPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicEmpNr")
                        .HasDatabaseName("IX_FacultyEmploymentHistory_Academic");

                    b.HasIndex("DepartmentName");

                    b.HasIndex("IsCurrentPosition")
                        .HasDatabaseName("IX_FacultyEmploymentHistory_Current");

                    b.HasIndex("AcademicEmpNr", "StartDate")
                        .HasDatabaseName("IX_FacultyEmploymentHistory_Academic_StartDate");

                    b.ToTable("FacultyEmploymentHistory");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.FacultyExpertise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicEmpNr")
                        .HasColumnType("int");

                    b.Property<string>("Certifications")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExpertiseLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("GrantCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrimaryExpertise")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("PublicationCount")
                        .HasColumnType("int");

                    b.Property<string>("ResearchAreaCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicEmpNr")
                        .HasDatabaseName("IX_FacultyExpertise_Academic");

                    b.HasIndex("ExpertiseLevel")
                        .HasDatabaseName("IX_FacultyExpertise_Level");

                    b.HasIndex("IsPrimaryExpertise")
                        .HasDatabaseName("IX_FacultyExpertise_Primary");

                    b.HasIndex("ResearchAreaCode");

                    b.HasIndex("AcademicEmpNr", "ResearchAreaCode")
                        .IsUnique()
                        .HasDatabaseName("IX_FacultyExpertise_Academic_ResearchArea");

                    b.ToTable("FacultyExpertise");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.FacultyProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicEmpNr")
                        .HasColumnType("int");

                    b.Property<string>("AwardsHonors")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Biography")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ConsultationAvailability")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentResearchProjects")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("EducationSummary")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("EmergencyContact")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("GoogleScholarUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("InternalNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsAcceptingGraduateStudents")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMediaContactAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublicProfile")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastProfileUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LinkedInUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OfficeHours")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OfficePhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("OrcidId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PreferredName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProfessionalEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProfessionalMemberships")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ProfessionalTitle")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfilePhotoPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ResearchGateUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ResearchInterests")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TeachingPhilosophy")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicEmpNr")
                        .IsUnique()
                        .HasDatabaseName("IX_FacultyProfile_Academic");

                    b.HasIndex("IsPublicProfile")
                        .HasDatabaseName("IX_FacultyProfile_Public");

                    b.HasIndex("IsPublicProfile", "ModifiedDate")
                        .HasDatabaseName("IX_FacultyProfile_Public_LastModified");

                    b.ToTable("FacultyProfiles");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.FacultyPromotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicEmpNr")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CollegeRecommendation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DecisionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DecisionMadeBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DepartmentRecommendation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FinalDecision")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FromRankCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool?>("FromTenureStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Justification")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("PromotionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SupportingDocuments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ToRankCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool?>("ToTenureStatus")
                        .HasColumnType("bit");

                    b.Property<string>("UniversityRecommendation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicEmpNr")
                        .HasDatabaseName("IX_FacultyPromotion_Academic");

                    b.HasIndex("EffectiveDate")
                        .HasDatabaseName("IX_FacultyPromotion_EffectiveDate");

                    b.HasIndex("FromRankCode");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_FacultyPromotion_Status");

                    b.HasIndex("ToRankCode");

                    b.ToTable("FacultyPromotions");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.FacultyPublication", b =>
                {
                    b.Property<int>("PublicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublicationId"));

                    b.Property<string>("Abstract")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("AcademicId")
                        .HasColumnType("int");

                    b.Property<int>("CitationCount")
                        .HasColumnType("int");

                    b.Property<string>("CoAuthors")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ConferenceName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DOI")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExternalUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("FacultyProfileId")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FundingSource")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ISBN")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ISSN")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsOpenAccess")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPeerReviewed")
                        .HasColumnType("bit");

                    b.Property<string>("Issue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Journal")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Keywords")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Pages")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("date");

                    b.Property<string>("PublicationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PublicationYear")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ResearchArea")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Volume")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PublicationId");

                    b.HasIndex("AcademicId")
                        .HasDatabaseName("IX_FacultyPublication_Academic");

                    b.HasIndex("DOI")
                        .HasDatabaseName("IX_FacultyPublication_DOI");

                    b.HasIndex("FacultyProfileId");

                    b.HasIndex("PublicationType")
                        .HasDatabaseName("IX_FacultyPublication_Type");

                    b.HasIndex("PublicationYear")
                        .HasDatabaseName("IX_FacultyPublication_Year");

                    b.HasIndex("AcademicId", "PublicationYear")
                        .HasDatabaseName("IX_FacultyPublication_Academic_Year");

                    b.ToTable("FacultyPublications");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.FacultySearchCommittee", b =>
                {
                    b.Property<string>("SearchCommitteeCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<bool>("AcceptingApplications")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ActualCompletionDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ApplicationDeadline")
                        .HasColumnType("date");

                    b.Property<int>("ApplicationsReceived")
                        .HasColumnType("int");

                    b.Property<int>("CampusVisitsScheduled")
                        .HasColumnType("int");

                    b.Property<int>("ChairEmpNr")
                        .HasColumnType("int");

                    b.Property<string>("College")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CommitteeFormationDate")
                        .HasColumnType("date");

                    b.Property<string>("ComplianceNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ConfidentialNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("EmploymentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EvaluationCriteria")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("date");

                    b.Property<int?>("HiredCandidateEmpNr")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("InitialInterviewsScheduled")
                        .HasColumnType("int");

                    b.Property<string>("JobDescription")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinExternalMembers")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OffersAccepted")
                        .HasColumnType("int");

                    b.Property<int>("OffersExtended")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PlannedCompletionDate")
                        .HasColumnType("date");

                    b.Property<bool?>("PositionFilled")
                        .HasColumnType("bit");

                    b.Property<string>("PositionRank")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PositionTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PositionType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PreferredQualifications")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("RequiredMemberCount")
                        .HasColumnType("int");

                    b.Property<string>("RequiredQualifications")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("RequiresDiversityCompliance")
                        .HasColumnType("bit");

                    b.Property<string>("ResearchAreas")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("SalaryRangeMax")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("SalaryRangeMin")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("SearchBudget")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("SearchCommitteeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SearchNotes")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SearchStartDate")
                        .HasColumnType("date");

                    b.Property<string>("SearchStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SearchTimeline")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ServiceExpectations")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("StartingSalary")
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("TeachingResponsibilities")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("UnsuccessfulReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("WillReopenSearch")
                        .HasColumnType("bit");

                    b.HasKey("SearchCommitteeCode");

                    b.HasIndex("ChairEmpNr");

                    b.HasIndex("DepartmentName");

                    b.HasIndex("HiredCandidateEmpNr");

                    b.ToTable("FacultySearchCommittees");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.FacultySearchCommitteeMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppointedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("date");

                    b.Property<bool>("AttendedDiversityTraining")
                        .HasColumnType("bit");

                    b.Property<string>("AvailabilityConstraints")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ConfidentialityAgreementDate")
                        .HasColumnType("date");

                    b.Property<string>("ConflictsOfInterest")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ContactInformation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DepartureDate")
                        .HasColumnType("date");

                    b.Property<string>("DepartureReason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("DiversityTrainingDate")
                        .HasColumnType("date");

                    b.Property<string>("ExpertiseArea")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ExternalAffiliation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("InterviewsParticipated")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExternalMember")
                        .HasColumnType("bit");

                    b.Property<int>("MeetingsAttended")
                        .HasColumnType("int");

                    b.Property<int>("MemberEmpNr")
                        .HasColumnType("int");

                    b.Property<string>("MemberRank")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MemberRole")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ParticipatedInCampusVisits")
                        .HasColumnType("bit");

                    b.Property<string>("PerformanceNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ProcessEvaluation")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("RepresentationCategory")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SearchCommitteeCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SelectionReason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("SignedConfidentialityAgreement")
                        .HasColumnType("bit");

                    b.Property<int>("TotalMeetingsHeld")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberEmpNr");

                    b.HasIndex("SearchCommitteeCode");

                    b.ToTable("FacultySearchCommitteeMembers");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.FacultyServiceRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicEmpNr")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("EstimatedHoursPerYear")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExternalService")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMajorService")
                        .HasColumnType("bit");

                    b.Property<string>("LeadershipRole")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Organization")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Recognition")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ServiceLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ServiceTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("ServiceWeight")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AcademicEmpNr")
                        .HasDatabaseName("IX_FacultyServiceRecord_Academic");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_FacultyServiceRecord_Active");

                    b.HasIndex("IsMajorService")
                        .HasDatabaseName("IX_FacultyServiceRecord_Major");

                    b.HasIndex("ServiceLevel")
                        .HasDatabaseName("IX_FacultyServiceRecord_Level");

                    b.ToTable("FacultyServiceRecords");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CourseEnrollmentId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CreditHours")
                        .HasPrecision(4, 1)
                        .HasColumnType("decimal(4,1)");

                    b.Property<DateTime>("GradeDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("GradePoints")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<int>("GradeType")
                        .HasColumnType("int");

                    b.Property<string>("GradedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsFinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsMakeup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsReplacement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LetterGrade")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("NumericGrade")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("QualityPoints")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<int?>("ReplacedGradeId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseEnrollmentId")
                        .HasDatabaseName("IX_Grades_CourseEnrollmentId");

                    b.HasIndex("ReplacedGradeId");

                    b.HasIndex("CourseEnrollmentId", "IsFinal")
                        .HasDatabaseName("IX_Grades_Enrollment_Final");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.OfficeAssignment", b =>
                {
                    b.Property<int>("OfficeAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfficeAssignmentId"));

                    b.Property<int>("AcademicId")
                        .HasColumnType("int");

                    b.Property<string>("AccessibilityFeatures")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("AssignmentEndDate")
                        .HasColumnType("date");

                    b.Property<string>("AssignmentReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("AssignmentStartDate")
                        .HasColumnType("date");

                    b.Property<string>("AssignmentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CostCenter")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DirectPhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("EmergencyContactInstructions")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("FacultyProfileId")
                        .HasColumnType("int");

                    b.Property<string>("Floor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("HasConferenceCapability")
                        .HasColumnType("bit");

                    b.Property<bool>("HasWindowView")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAccessible")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSharedOffice")
                        .HasColumnType("bit");

                    b.Property<string>("KeyCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Latitude")
                        .HasPrecision(10, 8)
                        .HasColumnType("decimal(10,8)");

                    b.Property<decimal?>("Longitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("decimal(11,8)");

                    b.Property<int?>("MaxOccupancy")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("OfficeFeatures")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("OfficeSize")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("OfficeType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParkingSpot")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneExtension")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SecurityAccess")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Wing")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OfficeAssignmentId");

                    b.HasIndex("AcademicId")
                        .HasDatabaseName("IX_OfficeAssignment_Academic");

                    b.HasIndex("AssignmentStatus")
                        .HasDatabaseName("IX_OfficeAssignment_Status");

                    b.HasIndex("FacultyProfileId");

                    b.HasIndex("AcademicId", "AssignmentStatus")
                        .HasDatabaseName("IX_OfficeAssignment_Academic_Status");

                    b.HasIndex("BuildingName", "RoomNumber")
                        .HasDatabaseName("IX_OfficeAssignment_Building_Room");

                    b.ToTable("OfficeAssignments");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.PromotionApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicEmpNr")
                        .HasColumnType("int");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("AdditionalNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("ApplicationDeadline")
                        .HasColumnType("date");

                    b.Property<string>("ApplicationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CandidateStatement")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CollegeRecommendation")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentRank")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DecisionDate")
                        .HasColumnType("date");

                    b.Property<string>("DecisionRationale")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("DepartmentRecommendation")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("ExpectedDecisionDate")
                        .HasColumnType("date");

                    b.Property<string>("ExternalReferees")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FinalDecision")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal?>("GrantFundingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsSeekingTenure")
                        .HasColumnType("bit");

                    b.Property<int?>("MentorEmpNr")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationPreferences")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PromotionCommitteeId")
                        .HasColumnType("int");

                    b.Property<int>("PublicationsCount")
                        .HasColumnType("int");

                    b.Property<string>("RequestedRank")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ResearchPortfolio")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ServicePortfolio")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal?>("TeachingEvaluationAverage")
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("TeachingPortfolio")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("UniversityRecommendation")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("WorkflowStage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("YearsInCurrentRank")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicEmpNr")
                        .HasDatabaseName("IX_PromotionApplication_Academic");

                    b.HasIndex("MentorEmpNr");

                    b.HasIndex("PromotionCommitteeId");

                    b.HasIndex("RequestedRank")
                        .HasDatabaseName("IX_PromotionApplication_RequestedRank");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_PromotionApplication_Status");

                    b.HasIndex("AcademicYear", "Status")
                        .HasDatabaseName("IX_PromotionApplication_Year_Status");

                    b.ToTable("PromotionApplications");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.PromotionCommittee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<int>("ChairEmpNr")
                        .HasColumnType("int");

                    b.Property<string>("CollegeCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CommitteeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CommitteeScope")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CommitteeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConfidentialityGuidelines")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ContactInformation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentWorkload")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("DissolutionDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("FormationDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MaxWorkloadCapacity")
                        .HasColumnType("int");

                    b.Property<int>("MaximumMembers")
                        .HasColumnType("int");

                    b.Property<string>("MeetingSchedule")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MembershipRequirements")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("MinimumMembers")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NextMeetingDate")
                        .HasColumnType("date");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("QuorumRequirement")
                        .HasColumnType("int");

                    b.Property<decimal>("VotingThreshold")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("ChairEmpNr")
                        .HasDatabaseName("IX_PromotionCommittee_Chair");

                    b.HasIndex("CommitteeType")
                        .HasDatabaseName("IX_PromotionCommittee_Type");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_PromotionCommittee_Active");

                    b.HasIndex("AcademicYear", "IsActive")
                        .HasDatabaseName("IX_PromotionCommittee_Year_Active");

                    b.ToTable("PromotionCommittees");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.PromotionCommitteeMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("date");

                    b.Property<int>("AssignedCases")
                        .HasColumnType("int");

                    b.Property<decimal>("AttendanceRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("CollegeCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("CompletedCases")
                        .HasColumnType("int");

                    b.Property<bool>("ConfidentialityAgreementSigned")
                        .HasColumnType("bit");

                    b.Property<string>("ConflictOfInterestDeclaration")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("EmergencyContact")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("EmpNr")
                        .HasColumnType("int");

                    b.Property<string>("ExpertiseAreas")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ExternalInstitution")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("HasVotingPrivileges")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExternalMember")
                        .HasColumnType("bit");

                    b.Property<int>("MeetingsAttended")
                        .HasColumnType("int");

                    b.Property<string>("MemberRank")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MemberRole")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PreferredContactMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PromotionCommitteeId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("TermEndDate")
                        .HasColumnType("date");

                    b.Property<int>("TotalMeetingsScheduled")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TrainingCompletionDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("EmpNr")
                        .HasDatabaseName("IX_PromotionCommitteeMember_Academic");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_PromotionCommitteeMember_Active");

                    b.HasIndex("PromotionCommitteeId")
                        .HasDatabaseName("IX_PromotionCommitteeMember_Committee");

                    b.HasIndex("PromotionCommitteeId", "IsActive")
                        .HasDatabaseName("IX_PromotionCommitteeMember_Committee_Active");

                    b.ToTable("PromotionCommitteeMembers");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.PromotionVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalEvidenceNeeded")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("CanChangeVote")
                        .HasColumnType("bit");

                    b.Property<string>("Comments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ConfidenceLevel")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ConflictOfInterestDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentsReviewed")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ExternalConsultationDetails")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("ExternalConsultationSought")
                        .HasColumnType("bit");

                    b.Property<bool>("HasConflictOfInterest")
                        .HasColumnType("bit");

                    b.Property<string>("IdentifiedConcerns")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("IdentifiedStrengths")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsConfidential")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecused")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("OverallScore")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("PrimaryReason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PromotionApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("PromotionCommitteeMemberId")
                        .HasColumnType("int");

                    b.Property<string>("Recommendations")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("RecusalReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ResearchEvaluation")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("ReviewTimeHours")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("ServiceEvaluation")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SubmissionMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SuggestedImprovements")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TeachingEvaluation")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VerificationCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Vote")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("VoteChangeCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("VoteDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("VoteMetadata")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("VoteWeight")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<int>("VoterEmpNr")
                        .HasColumnType("int");

                    b.Property<string>("VoterIPAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("VotingMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VotingSessionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PromotionApplicationId")
                        .HasDatabaseName("IX_PromotionVote_Application");

                    b.HasIndex("PromotionCommitteeMemberId");

                    b.HasIndex("Vote")
                        .HasDatabaseName("IX_PromotionVote_Vote");

                    b.HasIndex("VoterEmpNr")
                        .HasDatabaseName("IX_PromotionVote_Voter");

                    b.HasIndex("PromotionApplicationId", "Vote")
                        .HasDatabaseName("IX_PromotionVote_Application_Vote");

                    b.ToTable("PromotionVotes");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.PromotionWorkflowStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActualDurationDays")
                        .HasColumnType("int");

                    b.Property<string>("ApprovalCriteria")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("AssignedReviewerEmpNr")
                        .HasColumnType("int");

                    b.Property<bool>("CanRunInParallel")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("date");

                    b.Property<decimal>("CompletionPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("date");

                    b.Property<string>("EscalationPath")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("EstimatedDurationDays")
                        .HasColumnType("int");

                    b.Property<string>("ExpectedDeliverables")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ExternalReviewerInfo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Feedback")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NotificationRequirements")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Outcome")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("OutcomeDate")
                        .HasColumnType("date");

                    b.Property<string>("PrerequisiteSteps")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PromotionApplicationId")
                        .HasColumnType("int");

                    b.Property<int?>("PromotionCommitteeId")
                        .HasColumnType("int");

                    b.Property<string>("Recommendations")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("RequiredDocuments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("RequiresExternalReview")
                        .HasColumnType("bit");

                    b.Property<string>("ResponsibleParty")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("StepDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("StepMetadata")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StepOrder")
                        .HasColumnType("int");

                    b.Property<string>("StepType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VoteResult")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedReviewerEmpNr");

                    b.HasIndex("PromotionApplicationId")
                        .HasDatabaseName("IX_PromotionWorkflowStep_Application");

                    b.HasIndex("PromotionCommitteeId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_PromotionWorkflowStep_Status");

                    b.HasIndex("StepOrder")
                        .HasDatabaseName("IX_PromotionWorkflowStep_Order");

                    b.HasIndex("PromotionApplicationId", "StepOrder")
                        .HasDatabaseName("IX_PromotionWorkflowStep_Application_Order");

                    b.ToTable("PromotionWorkflowSteps");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Rank", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("AllowsResearch")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowsTeaching")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("Level")
                        .HasColumnType("int");

                    b.Property<decimal?>("MaxSalary")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("MinDegreeLevel")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("MinExperienceYears")
                        .HasColumnType("int");

                    b.Property<decimal?>("MinSalary")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RequiresTenure")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Code");

                    b.HasIndex("Category");

                    b.HasIndex("IsActive");

                    b.HasIndex("Level");

                    b.HasIndex("Category", "Level");

                    b.ToTable("Ranks", t =>
                        {
                            t.HasCheckConstraint("CK_Rank_SalaryRange", "MinSalary <= MaxSalary OR MinSalary IS NULL OR MaxSalary IS NULL");
                        });
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.ResearchArea", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ParentAreaCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PrimaryDiscipline")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Code");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_ResearchArea_IsActive");

                    b.HasIndex("ParentAreaCode")
                        .HasDatabaseName("IX_ResearchArea_Parent");

                    b.HasIndex("PrimaryDiscipline")
                        .HasDatabaseName("IX_ResearchArea_Discipline");

                    b.ToTable("ResearchAreas");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Room", b =>
                {
                    b.Property<string>("Number")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("BuildingCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal?>("AreaSqFt")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("BookingNotes")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FloorNumber")
                        .HasColumnType("int");

                    b.Property<bool>("HasAVEquipment")
                        .HasColumnType("bit");

                    b.Property<bool>("HasComputerAccess")
                        .HasColumnType("bit");

                    b.Property<bool>("HasProjector")
                        .HasColumnType("bit");

                    b.Property<bool>("HasWhiteboard")
                        .HasColumnType("bit");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccessible")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastMaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MaintenanceNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SpecialEquipment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Number", "BuildingCode");

                    b.HasIndex("FloorNumber");

                    b.HasIndex("IsActive");

                    b.HasIndex("Type");

                    b.HasIndex("BuildingCode", "Type");

                    b.ToTable("Rooms", t =>
                        {
                            t.HasCheckConstraint("CK_Room_Capacity", "Capacity >= 1 OR Capacity IS NULL");
                        });
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.ServiceLoadSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<decimal?>("AverageServiceRating")
                        .HasColumnType("decimal(3,2)");

                    b.Property<int>("CommitteeMemberships")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("DepartmentServiceRanking")
                        .HasColumnType("int");

                    b.Property<int>("ExternalServiceCommitments")
                        .HasColumnType("int");

                    b.Property<int>("FacultyEmpNr")
                        .HasColumnType("int");

                    b.Property<bool>("IsServiceLoadBalanced")
                        .HasColumnType("bit");

                    b.Property<int>("LeadershipRoles")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServiceContributionNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ServiceLoadCategory")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ServiceLoadRecommendations")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ServiceRecognition")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("SummaryCalculationDate")
                        .HasColumnType("date");

                    b.Property<decimal>("TotalActualHours")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("TotalCourseReleases")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalEstimatedHours")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("TotalServiceAssignments")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalServiceCompensation")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TotalServiceWeight")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentName");

                    b.HasIndex("FacultyEmpNr");

                    b.ToTable("ServiceLoadSummaries");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.StudentAdvisorAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdvisorId")
                        .HasColumnType("int");

                    b.Property<int>("AdvisorType")
                        .HasColumnType("int");

                    b.Property<string>("AssignedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("AssignmentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("AssignmentReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("StudentEmpNr")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorId")
                        .HasDatabaseName("IX_StudentAdvisorAssignments_AdvisorId");

                    b.HasIndex("StudentEmpNr")
                        .HasDatabaseName("IX_StudentAdvisorAssignments_StudentEmpNr");

                    b.HasIndex("AdvisorId", "IsActive")
                        .HasDatabaseName("IX_StudentAdvisorAssignments_Advisor_Active");

                    b.HasIndex("StudentEmpNr", "IsPrimary", "IsActive")
                        .HasDatabaseName("IX_StudentAdvisorAssignments_Student_Primary_Active");

                    b.ToTable("StudentAdvisorAssignments");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.StudentDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileHash")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StoredFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("StudentEmpNr")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UploadDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("UploadedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("VerificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentType")
                        .HasDatabaseName("IX_StudentDocuments_DocumentType");

                    b.HasIndex("IsVerified")
                        .HasDatabaseName("IX_StudentDocuments_IsVerified");

                    b.HasIndex("StudentEmpNr")
                        .HasDatabaseName("IX_StudentDocuments_StudentEmpNr");

                    b.HasIndex("StudentEmpNr", "DocumentType")
                        .HasDatabaseName("IX_StudentDocuments_Student_Type");

                    b.ToTable("StudentDocuments", t =>
                        {
                            t.HasCheckConstraint("CK_StudentDocuments_FileSize", "FileSizeBytes >= 0");
                        });
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.StudentEnrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcademicTermId")
                        .HasColumnType("int");

                    b.Property<int?>("AcademicYear")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Grade")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Semester")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StudentEmpNr")
                        .HasColumnType("int");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicTermId");

                    b.HasIndex("SubjectCode");

                    b.HasIndex("StudentEmpNr", "SubjectCode", "Semester", "AcademicYear");

                    b.ToTable("StudentEnrollments");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Subject", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreditHours")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Level")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("MaxEnrollment")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Prerequisites")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TypicalSemester")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Code");

                    b.HasIndex("IsActive");

                    b.HasIndex("Level");

                    b.HasIndex("Title");

                    b.HasIndex("DepartmentName", "Level");

                    b.ToTable("Subjects", t =>
                        {
                            t.HasCheckConstraint("CK_Subject_CreditHours", "CreditHours >= 1 AND CreditHours <= 12 OR CreditHours IS NULL");
                        });
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.TeacherRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicEmpNr")
                        .HasColumnType("int");

                    b.Property<int?>("AcademicYear")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RatingSource")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int");

                    b.Property<string>("Semester")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SubjectCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("TeacherEmpNr")
                        .HasColumnType("int");

                    b.Property<int?>("TeachingProfEmpNr")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicEmpNr");

                    b.HasIndex("SubjectCode");

                    b.HasIndex("TeacherEmpNr");

                    b.HasIndex("TeachingProfEmpNr");

                    b.ToTable("TeacherRatings");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Teaching", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicEmpNr")
                        .HasColumnType("int");

                    b.Property<int?>("AcademicYear")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EnrollmentCount")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProfessorEmpNr")
                        .HasColumnType("int");

                    b.Property<string>("Semester")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("TeacherEmpNr")
                        .HasColumnType("int");

                    b.Property<int?>("TeachingProfEmpNr")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorEmpNr");

                    b.HasIndex("SubjectCode");

                    b.HasIndex("TeacherEmpNr");

                    b.HasIndex("TeachingProfEmpNr");

                    b.HasIndex("AcademicEmpNr", "SubjectCode", "Semester", "AcademicYear");

                    b.ToTable("Teachings");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.TenureMilestone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicYear")
                        .HasColumnType("int");

                    b.Property<int?>("CommitteeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("date");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DevelopmentGoals")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("EvaluationCriteria")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("ExpectedDurationDays")
                        .HasColumnType("int");

                    b.Property<string>("ExternalReviewerInfo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Feedback")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("FollowUpActions")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("ImpactsTenureEligibility")
                        .HasColumnType("bit");

                    b.Property<string>("ImportanceLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<string>("Metadata")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("MilestoneDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MilestoneName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MilestoneOrder")
                        .HasColumnType("int");

                    b.Property<string>("MilestoneType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NextMilestoneDependencies")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NotificationRequirements")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Outcome")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("OutcomeDate")
                        .HasColumnType("date");

                    b.Property<int>("PreparationDays")
                        .HasColumnType("int");

                    b.Property<string>("Recommendations")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("RemediationDeadline")
                        .HasColumnType("date");

                    b.Property<string>("RemediationPlan")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("RemediationRequired")
                        .HasColumnType("bit");

                    b.Property<string>("RequiredDocuments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("RequiredEvidence")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("RequiresExternalReview")
                        .HasColumnType("bit");

                    b.Property<string>("ResponsibleParty")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ReviewerEmpNr")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SuccessCriteria")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("TenureTrackId")
                        .HasColumnType("int");

                    b.Property<int>("TenureYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReviewerEmpNr");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_TenureMilestone_Status");

                    b.HasIndex("TenureTrackId")
                        .HasDatabaseName("IX_TenureMilestone_TenureTrack");

                    b.HasIndex("TenureYear")
                        .HasDatabaseName("IX_TenureMilestone_Year");

                    b.HasIndex("TenureTrackId", "MilestoneOrder")
                        .HasDatabaseName("IX_TenureMilestone_Track_Order");

                    b.ToTable("TenureMilestones");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.TenureTrack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicEmpNr")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActualTenureDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("ClockExtensionYears")
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("ClockStatus")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CollegeTenureRecommendation")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentTenureRecommendation")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("ExpectedTenureDate")
                        .HasColumnType("date");

                    b.Property<string>("ExtensionReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FinalTenureDecision")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("FirstYearReviewDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstYearReviewOutcome")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEligibleForEarlyTenure")
                        .HasColumnType("bit");

                    b.Property<decimal>("MaxYearsAllowed")
                        .HasColumnType("decimal(4,2)");

                    b.Property<int?>("MentorEmpNr")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ProbationaryEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("SixthYearReviewDate")
                        .HasColumnType("date");

                    b.Property<string>("SixthYearReviewOutcome")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SpecialConditions")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("TenureApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("TenureDecisionRationale")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("TenureNotificationDate")
                        .HasColumnType("date");

                    b.Property<string>("TenureStatus")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("TenureTrackStartDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ThirdYearReviewDate")
                        .HasColumnType("date");

                    b.Property<string>("ThirdYearReviewOutcome")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UniversityTenureRecommendation")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("YearsOnTrack")
                        .HasColumnType("decimal(4,2)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicEmpNr")
                        .HasDatabaseName("IX_TenureTrack_Academic");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_TenureTrack_Active");

                    b.HasIndex("MentorEmpNr");

                    b.HasIndex("TenureApplicationId");

                    b.HasIndex("TenureStatus")
                        .HasDatabaseName("IX_TenureTrack_Status");

                    b.HasIndex("AcademicEmpNr", "IsActive")
                        .HasDatabaseName("IX_TenureTrack_Academic_Active");

                    b.ToTable("TenureTracks");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.University", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("AccreditationStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("EstablishedYear")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("StateProvince")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("StudentEnrollment")
                        .HasColumnType("int");

                    b.Property<string>("UniversityType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Website")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Code");

                    b.HasIndex("Country");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.HasIndex("Country", "StateProvince", "City");

                    b.ToTable("Universities", t =>
                        {
                            t.HasCheckConstraint("CK_University_StudentEnrollment", "StudentEnrollment >= 0 OR StudentEnrollment IS NULL");
                        });
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Identity.AcademiaRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalPermissions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsSystemRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("RoleType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentName")
                        .HasDatabaseName("IX_Roles_DepartmentName");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("IX_Roles_NormalizedName");

                    b.HasIndex("RoleType", "DepartmentName")
                        .HasDatabaseName("IX_Roles_RoleType_Department");

                    b.ToTable("Roles", null, t =>
                        {
                            t.HasCheckConstraint("CK_Roles_Priority", "Priority >= 1 AND Priority <= 10");
                        });
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Identity.AcademiaUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcademicId")
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastLoginIpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicId")
                        .HasDatabaseName("IX_Users_AcademicId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email")
                        .HasFilter("Email IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_UserName")
                        .HasFilter("UserName IS NOT NULL");

                    b.ToTable("Users", null, t =>
                        {
                            t.HasCheckConstraint("CK_Users_AccessFailedCount", "AccessFailedCount >= 0");

                            t.HasCheckConstraint("CK_Users_Email", "Email IS NULL OR Email LIKE '%_@_%.__%'");
                        });
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Identity.AcademiaUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AssignmentContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignmentReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentContextName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("EffectiveDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentContextName")
                        .HasDatabaseName("IX_UserRoles_DepartmentContextName");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_UserRoles_RoleId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserRoles_UserId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserRoles_User_Role_Global")
                        .HasFilter("DepartmentContextName IS NULL");

                    b.HasIndex("UserId", "RoleId", "DepartmentContextName")
                        .IsUnique()
                        .HasDatabaseName("IX_UserRoles_User_Role_Department")
                        .HasFilter("DepartmentContextName IS NOT NULL");

                    b.ToTable("UserRoles", null, t =>
                        {
                            t.HasCheckConstraint("CK_UserRoles_EffectiveDates", "ExpirationDate IS NULL OR ExpirationDate > EffectiveDate");
                        });
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Identity.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcademiaUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("JwtId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastUsedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevocationReason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademiaUserId");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_RefreshTokens_ExpiresAt");

                    b.HasIndex("IsRevoked")
                        .HasDatabaseName("IX_RefreshTokens_IsRevoked");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("IX_RefreshTokens_Token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_RefreshTokens_UserId");

                    b.HasIndex("UserId", "IsRevoked", "ExpiresAt")
                        .HasDatabaseName("IX_RefreshTokens_User_Status_Expiry");

                    b.ToTable("RefreshTokens", null, t =>
                        {
                            t.HasCheckConstraint("CK_RefreshTokens_Dates", "ExpiresAt > CreatedAt");

                            t.HasCheckConstraint("CK_RefreshTokens_Revocation", "(IsRevoked = 0 AND RevokedAt IS NULL) OR (IsRevoked = 1 AND RevokedAt IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Professor", b =>
                {
                    b.HasBaseType("Zeus.Academia.Infrastructure.Entities.Academic");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool?>("HasTenure")
                        .HasColumnType("bit");

                    b.Property<string>("RankCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ResearchArea")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasIndex("DepartmentName");

                    b.HasIndex("RankCode");

                    b.HasDiscriminator().HasValue("Professor");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Student", b =>
                {
                    b.HasBaseType("Zeus.Academia.Infrastructure.Entities.Academic");

                    b.Property<string>("AcademicAdvisor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AcademicStanding")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActualGraduationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CareerGoals")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CitizenshipStatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CreditHoursRequired")
                        .HasColumnType("int");

                    b.Property<decimal?>("CumulativeGPA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CurrentTerm")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DegreeCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("DietaryRestrictions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EmergencyPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnrollmentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnrollmentStatusDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ethnicity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ExpectedGraduationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("GPA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("HasDietaryRestrictions")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFullTime")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAcademicReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PersonalEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PersonalInterests")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PreferredContactMethod")
                        .HasColumnType("int");

                    b.Property<string>("PreferredName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrimaryAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("ProfileCompletionPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ProfileLastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfilePhotoPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Program")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("RequiresAccommodations")
                        .HasColumnType("bit");

                    b.Property<decimal?>("SemesterGPA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StudentId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("TotalCreditHoursAttempted")
                        .HasColumnType("int");

                    b.Property<int?>("TotalCreditHoursEarned")
                        .HasColumnType("int");

                    b.Property<int?>("YearOfStudy")
                        .HasColumnType("int");

                    b.HasIndex("DegreeCode");

                    b.HasIndex("DepartmentName");

                    b.ToTable("Academics", t =>
                        {
                            t.Property("DepartmentName")
                                .HasColumnName("Student_DepartmentName");
                        });

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Teacher", b =>
                {
                    b.HasBaseType("Zeus.Academia.Infrastructure.Entities.Academic");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("EmploymentType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("MaxCourseLoad")
                        .HasColumnType("int");

                    b.Property<string>("Specialization")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasIndex("DepartmentName");

                    b.ToTable("Academics", t =>
                        {
                            t.Property("DepartmentName")
                                .HasColumnName("Teacher_DepartmentName");
                        });

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.TeachingProf", b =>
                {
                    b.HasBaseType("Zeus.Academia.Infrastructure.Entities.Academic");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("EmploymentType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("HasTenure")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxCourseLoad")
                        .HasColumnType("int");

                    b.Property<string>("RankCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ResearchArea")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("ResearchPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Specialization")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("TeachingPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("DepartmentName");

                    b.HasIndex("RankCode");

                    b.ToTable("Academics", t =>
                        {
                            t.Property("DepartmentName")
                                .HasColumnName("TeachingProf_DepartmentName");

                            t.Property("EmploymentType")
                                .HasColumnName("TeachingProf_EmploymentType");

                            t.Property("HasTenure")
                                .HasColumnName("TeachingProf_HasTenure");

                            t.Property("MaxCourseLoad")
                                .HasColumnName("TeachingProf_MaxCourseLoad");

                            t.Property("RankCode")
                                .HasColumnName("TeachingProf_RankCode");

                            t.Property("ResearchArea")
                                .HasColumnName("TeachingProf_ResearchArea");

                            t.Property("Specialization")
                                .HasColumnName("TeachingProf_Specialization");
                        });

                    b.HasDiscriminator().HasValue("TeachingProf");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Identity.AcademiaRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Identity.AcademiaUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Identity.AcademiaUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Identity.AcademiaUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.AcademicAdvisor", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "FacultyMember")
                        .WithMany()
                        .HasForeignKey("FacultyEmpNr")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Department");

                    b.Navigation("FacultyMember");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.AcademicDegree", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Academic")
                        .WithMany("AcademicDegrees")
                        .HasForeignKey("AcademicEmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Degree", "Degree")
                        .WithMany("AcademicDegrees")
                        .HasForeignKey("DegreeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.University", "University")
                        .WithMany("AcademicDegrees")
                        .HasForeignKey("UniversityCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Academic");

                    b.Navigation("Degree");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.AcademicHonor", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.AcademicTerm", "AcademicTerm")
                        .WithMany()
                        .HasForeignKey("AcademicTermId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentEmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicTerm");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.AcademicRank", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Academic")
                        .WithMany("AcademicRanks")
                        .HasForeignKey("AcademicEmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.PromotionCommittee", "PromotionCommittee")
                        .WithMany("ApprovedRanks")
                        .HasForeignKey("PromotionCommitteeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Academic");

                    b.Navigation("PromotionCommittee");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.AdministrativeAssignment", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Assignee")
                        .WithMany("AdministrativeAssignments")
                        .HasForeignKey("AssigneeEmpNr")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.AdministrativeRole", "Role")
                        .WithMany("Assignments")
                        .HasForeignKey("RoleCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignee");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.ApplicationDocument", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.EnrollmentApplication", "Application")
                        .WithMany("Documents")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Award", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.AcademicTerm", "AcademicTerm")
                        .WithMany()
                        .HasForeignKey("AcademicTermId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentEmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicTerm");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Chair", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Academic")
                        .WithMany()
                        .HasForeignKey("AcademicEmpNr")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Department", "Department")
                        .WithMany("Chairs")
                        .HasForeignKey("DepartmentName")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Academic");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.CommitteeChair", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Chair")
                        .WithMany("CommitteeChairAssignments")
                        .HasForeignKey("ChairEmpNr")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Committee", "Committee")
                        .WithMany("CommitteeChairs")
                        .HasForeignKey("CommitteeName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chair");

                    b.Navigation("Committee");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.CommitteeLeadership", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Academic")
                        .WithMany("CommitteeLeaderships")
                        .HasForeignKey("AcademicEmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Committee", "Committee")
                        .WithMany()
                        .HasForeignKey("CommitteeName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Academic");

                    b.Navigation("Committee");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.CommitteeMember", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Academic")
                        .WithMany()
                        .HasForeignKey("AcademicEmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Committee", "Committee")
                        .WithMany("Members")
                        .HasForeignKey("CommitteeName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Professor", null)
                        .WithMany("CommitteeMembers")
                        .HasForeignKey("ProfessorEmpNr");

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.TeachingProf", null)
                        .WithMany("CommitteeMembers")
                        .HasForeignKey("TeachingProfEmpNr");

                    b.Navigation("Academic");

                    b.Navigation("Committee");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.CommitteeMemberAssignment", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Committee", "Committee")
                        .WithMany("CommitteeMemberAssignments")
                        .HasForeignKey("CommitteeName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Member")
                        .WithMany("CommitteeMemberAssignments")
                        .HasForeignKey("MemberEmpNr")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Committee");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.CourseEnrollment", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.AcademicTerm", "AcademicTerm")
                        .WithMany()
                        .HasForeignKey("AcademicTermId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentEmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicTerm");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.DegreeProgress", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Degree", "Degree")
                        .WithMany()
                        .HasForeignKey("DegreeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentEmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Degree");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Department", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Head")
                        .WithMany()
                        .HasForeignKey("HeadEmpNr")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Head");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.DepartmentChair", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Department", "Department")
                        .WithMany("DepartmentChairs")
                        .HasForeignKey("DepartmentName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Faculty")
                        .WithMany("DepartmentChairAssignments")
                        .HasForeignKey("FacultyEmpNr")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.DepartmentalService", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Department", "Department")
                        .WithMany("DepartmentalServices")
                        .HasForeignKey("DepartmentName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Faculty")
                        .WithMany("DepartmentalServices")
                        .HasForeignKey("FacultyEmpNr")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.EmergencyContact", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Student", "Student")
                        .WithMany("EmergencyContacts")
                        .HasForeignKey("StudentEmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.EnrollmentApplication", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.AcademicTerm", null)
                        .WithMany("Applications")
                        .HasForeignKey("AcademicTermId");

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Student", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantEmpNr")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.EnrollmentHistory", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.AcademicTerm", null)
                        .WithMany("EnrollmentHistory")
                        .HasForeignKey("AcademicTermId");

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.EnrollmentApplication", "Application")
                        .WithMany("EnrollmentHistory")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentName")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentEmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Department");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Extension", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "ResponsibleEmployee")
                        .WithMany()
                        .HasForeignKey("ResponsibleEmployeeNr")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ResponsibleEmployee");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.FacultyDocument", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.FacultyProfile", "FacultyProfile")
                        .WithMany()
                        .HasForeignKey("AcademicEmpNr")
                        .HasPrincipalKey("AcademicEmpNr")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Academic")
                        .WithMany()
                        .HasForeignKey("AcademicEmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.FacultyProfile", null)
                        .WithMany("Documents")
                        .HasForeignKey("FacultyProfileId");

                    b.Navigation("Academic");

                    b.Navigation("FacultyProfile");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.FacultyEmploymentHistory", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Academic")
                        .WithMany("EmploymentHistory")
                        .HasForeignKey("AcademicEmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentName")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Academic");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.FacultyExpertise", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Academic")
                        .WithMany("ResearchExpertise")
                        .HasForeignKey("AcademicEmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.ResearchArea", "ResearchArea")
                        .WithMany("FacultyExpertise")
                        .HasForeignKey("ResearchAreaCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Academic");

                    b.Navigation("ResearchArea");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.FacultyProfile", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Academic")
                        .WithOne()
                        .HasForeignKey("Zeus.Academia.Infrastructure.Entities.FacultyProfile", "AcademicEmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Academic");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.FacultyPromotion", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Academic")
                        .WithMany("Promotions")
                        .HasForeignKey("AcademicEmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Rank", "FromRank")
                        .WithMany()
                        .HasForeignKey("FromRankCode")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Rank", "ToRank")
                        .WithMany()
                        .HasForeignKey("ToRankCode")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Academic");

                    b.Navigation("FromRank");

                    b.Navigation("ToRank");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.FacultyPublication", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Academic")
                        .WithMany()
                        .HasForeignKey("AcademicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.FacultyProfile", "FacultyProfile")
                        .WithMany("Publications")
                        .HasForeignKey("FacultyProfileId");

                    b.Navigation("Academic");

                    b.Navigation("FacultyProfile");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.FacultySearchCommittee", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Chair")
                        .WithMany("FacultySearchCommitteesAsChair")
                        .HasForeignKey("ChairEmpNr")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Department", "Department")
                        .WithMany("FacultySearchCommittees")
                        .HasForeignKey("DepartmentName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "HiredCandidate")
                        .WithMany()
                        .HasForeignKey("HiredCandidateEmpNr");

                    b.Navigation("Chair");

                    b.Navigation("Department");

                    b.Navigation("HiredCandidate");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.FacultySearchCommitteeMember", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Member")
                        .WithMany("FacultySearchCommitteeMemberships")
                        .HasForeignKey("MemberEmpNr")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.FacultySearchCommittee", "SearchCommittee")
                        .WithMany("Members")
                        .HasForeignKey("SearchCommitteeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("SearchCommittee");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.FacultyServiceRecord", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Academic")
                        .WithMany("ServiceRecords")
                        .HasForeignKey("AcademicEmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Academic");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Grade", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.CourseEnrollment", "CourseEnrollment")
                        .WithMany("Grades")
                        .HasForeignKey("CourseEnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Grade", "ReplacedGrade")
                        .WithMany()
                        .HasForeignKey("ReplacedGradeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CourseEnrollment");

                    b.Navigation("ReplacedGrade");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.OfficeAssignment", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Academic")
                        .WithMany()
                        .HasForeignKey("AcademicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.FacultyProfile", "FacultyProfile")
                        .WithMany("OfficeAssignments")
                        .HasForeignKey("FacultyProfileId");

                    b.Navigation("Academic");

                    b.Navigation("FacultyProfile");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.PromotionApplication", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Academic")
                        .WithMany("PromotionApplications")
                        .HasForeignKey("AcademicEmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Mentor")
                        .WithMany()
                        .HasForeignKey("MentorEmpNr");

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.PromotionCommittee", "PromotionCommittee")
                        .WithMany("PromotionApplications")
                        .HasForeignKey("PromotionCommitteeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Academic");

                    b.Navigation("Mentor");

                    b.Navigation("PromotionCommittee");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.PromotionCommittee", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Chair")
                        .WithMany("ChairedPromotionCommittees")
                        .HasForeignKey("ChairEmpNr")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chair");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.PromotionCommitteeMember", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Academic")
                        .WithMany("PromotionCommitteeMemberships")
                        .HasForeignKey("EmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.PromotionCommittee", "PromotionCommittee")
                        .WithMany("Members")
                        .HasForeignKey("PromotionCommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Academic");

                    b.Navigation("PromotionCommittee");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.PromotionVote", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.PromotionApplication", "PromotionApplication")
                        .WithMany("Votes")
                        .HasForeignKey("PromotionApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.PromotionCommitteeMember", "PromotionCommitteeMember")
                        .WithMany("Votes")
                        .HasForeignKey("PromotionCommitteeMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Voter")
                        .WithMany("PromotionVotes")
                        .HasForeignKey("VoterEmpNr")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PromotionApplication");

                    b.Navigation("PromotionCommitteeMember");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.PromotionWorkflowStep", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "AssignedReviewer")
                        .WithMany("AssignedPromotionSteps")
                        .HasForeignKey("AssignedReviewerEmpNr")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.PromotionApplication", "PromotionApplication")
                        .WithMany("WorkflowSteps")
                        .HasForeignKey("PromotionApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.PromotionCommittee", "PromotionCommittee")
                        .WithMany()
                        .HasForeignKey("PromotionCommitteeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AssignedReviewer");

                    b.Navigation("PromotionApplication");

                    b.Navigation("PromotionCommittee");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.ResearchArea", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.ResearchArea", "ParentArea")
                        .WithMany("ChildAreas")
                        .HasForeignKey("ParentAreaCode")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ParentArea");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Room", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Building", "Building")
                        .WithMany("Rooms")
                        .HasForeignKey("BuildingCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.ServiceLoadSummary", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Department", "Department")
                        .WithMany("ServiceLoadSummaries")
                        .HasForeignKey("DepartmentName")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Faculty")
                        .WithMany("ServiceLoadSummaries")
                        .HasForeignKey("FacultyEmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.StudentAdvisorAssignment", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.AcademicAdvisor", "Advisor")
                        .WithMany("StudentAssignments")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Student", "Student")
                        .WithMany("AdvisorAssignments")
                        .HasForeignKey("StudentEmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.StudentDocument", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Student", "Student")
                        .WithMany("Documents")
                        .HasForeignKey("StudentEmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.StudentEnrollment", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.AcademicTerm", null)
                        .WithMany("Enrollments")
                        .HasForeignKey("AcademicTermId");

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentEmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Subject", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Department", "Department")
                        .WithMany("Subjects")
                        .HasForeignKey("DepartmentName")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.TeacherRating", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Academic")
                        .WithMany()
                        .HasForeignKey("AcademicEmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectCode")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Teacher", null)
                        .WithMany("TeacherRatings")
                        .HasForeignKey("TeacherEmpNr");

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.TeachingProf", null)
                        .WithMany("TeacherRatings")
                        .HasForeignKey("TeachingProfEmpNr");

                    b.Navigation("Academic");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Teaching", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Academic")
                        .WithMany()
                        .HasForeignKey("AcademicEmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Professor", null)
                        .WithMany("Teachings")
                        .HasForeignKey("ProfessorEmpNr");

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Subject", "Subject")
                        .WithMany("Teachings")
                        .HasForeignKey("SubjectCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Teacher", null)
                        .WithMany("Teachings")
                        .HasForeignKey("TeacherEmpNr");

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.TeachingProf", null)
                        .WithMany("Teachings")
                        .HasForeignKey("TeachingProfEmpNr");

                    b.Navigation("Academic");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.TenureMilestone", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Reviewer")
                        .WithMany("ReviewedTenureMilestones")
                        .HasForeignKey("ReviewerEmpNr")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.TenureTrack", "TenureTrack")
                        .WithMany("Milestones")
                        .HasForeignKey("TenureTrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reviewer");

                    b.Navigation("TenureTrack");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.TenureTrack", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Academic")
                        .WithMany("TenureTracks")
                        .HasForeignKey("AcademicEmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Mentor")
                        .WithMany()
                        .HasForeignKey("MentorEmpNr");

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.PromotionApplication", "TenureApplication")
                        .WithMany()
                        .HasForeignKey("TenureApplicationId");

                    b.Navigation("Academic");

                    b.Navigation("Mentor");

                    b.Navigation("TenureApplication");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Identity.AcademiaRole", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Roles_Department_DepartmentName");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Identity.AcademiaUser", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Academic")
                        .WithMany()
                        .HasForeignKey("AcademicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Users_Academic_AcademicId");

                    b.Navigation("Academic");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Identity.AcademiaUserRole", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Department", "DepartmentContext")
                        .WithMany()
                        .HasForeignKey("DepartmentContextName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_UserRoles_DepartmentContext_DepartmentContextName");

                    b.HasOne("Zeus.Academia.Infrastructure.Identity.AcademiaRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_Role_RoleId");

                    b.HasOne("Zeus.Academia.Infrastructure.Identity.AcademiaUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_User_UserId");

                    b.Navigation("DepartmentContext");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Identity.RefreshToken", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Identity.AcademiaUser", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("AcademiaUserId");

                    b.HasOne("Zeus.Academia.Infrastructure.Identity.AcademiaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RefreshTokens_User_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Professor", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Department", "Department")
                        .WithMany("Professors")
                        .HasForeignKey("DepartmentName")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Rank", "Rank")
                        .WithMany("Professors")
                        .HasForeignKey("RankCode")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Student", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Degree", "Degree")
                        .WithMany("Students")
                        .HasForeignKey("DegreeCode")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentName")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Degree");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Teacher", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Department", "Department")
                        .WithMany("Teachers")
                        .HasForeignKey("DepartmentName")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.TeachingProf", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Department", "Department")
                        .WithMany("TeachingProfs")
                        .HasForeignKey("DepartmentName")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Rank", "Rank")
                        .WithMany("TeachingProfs")
                        .HasForeignKey("RankCode")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Department");

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Academic", b =>
                {
                    b.Navigation("AcademicDegrees");

                    b.Navigation("AcademicRanks");

                    b.Navigation("AdministrativeAssignments");

                    b.Navigation("AssignedPromotionSteps");

                    b.Navigation("ChairedPromotionCommittees");

                    b.Navigation("CommitteeChairAssignments");

                    b.Navigation("CommitteeLeaderships");

                    b.Navigation("CommitteeMemberAssignments");

                    b.Navigation("DepartmentChairAssignments");

                    b.Navigation("DepartmentalServices");

                    b.Navigation("EmploymentHistory");

                    b.Navigation("FacultySearchCommitteeMemberships");

                    b.Navigation("FacultySearchCommitteesAsChair");

                    b.Navigation("PromotionApplications");

                    b.Navigation("PromotionCommitteeMemberships");

                    b.Navigation("PromotionVotes");

                    b.Navigation("Promotions");

                    b.Navigation("ResearchExpertise");

                    b.Navigation("ReviewedTenureMilestones");

                    b.Navigation("ServiceLoadSummaries");

                    b.Navigation("ServiceRecords");

                    b.Navigation("TenureTracks");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.AcademicAdvisor", b =>
                {
                    b.Navigation("StudentAssignments");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.AcademicTerm", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("EnrollmentHistory");

                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.AdministrativeRole", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Building", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Committee", b =>
                {
                    b.Navigation("CommitteeChairs");

                    b.Navigation("CommitteeMemberAssignments");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.CourseEnrollment", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Degree", b =>
                {
                    b.Navigation("AcademicDegrees");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Department", b =>
                {
                    b.Navigation("Chairs");

                    b.Navigation("DepartmentChairs");

                    b.Navigation("DepartmentalServices");

                    b.Navigation("FacultySearchCommittees");

                    b.Navigation("Professors");

                    b.Navigation("ServiceLoadSummaries");

                    b.Navigation("Students");

                    b.Navigation("Subjects");

                    b.Navigation("Teachers");

                    b.Navigation("TeachingProfs");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.EnrollmentApplication", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("EnrollmentHistory");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.FacultyProfile", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("OfficeAssignments");

                    b.Navigation("Publications");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.FacultySearchCommittee", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.PromotionApplication", b =>
                {
                    b.Navigation("Votes");

                    b.Navigation("WorkflowSteps");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.PromotionCommittee", b =>
                {
                    b.Navigation("ApprovedRanks");

                    b.Navigation("Members");

                    b.Navigation("PromotionApplications");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.PromotionCommitteeMember", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Rank", b =>
                {
                    b.Navigation("Professors");

                    b.Navigation("TeachingProfs");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.ResearchArea", b =>
                {
                    b.Navigation("ChildAreas");

                    b.Navigation("FacultyExpertise");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Subject", b =>
                {
                    b.Navigation("Teachings");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.TenureTrack", b =>
                {
                    b.Navigation("Milestones");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.University", b =>
                {
                    b.Navigation("AcademicDegrees");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Identity.AcademiaRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Identity.AcademiaUser", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Professor", b =>
                {
                    b.Navigation("CommitteeMembers");

                    b.Navigation("Teachings");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Student", b =>
                {
                    b.Navigation("AdvisorAssignments");

                    b.Navigation("Documents");

                    b.Navigation("EmergencyContacts");

                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Teacher", b =>
                {
                    b.Navigation("TeacherRatings");

                    b.Navigation("Teachings");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.TeachingProf", b =>
                {
                    b.Navigation("CommitteeMembers");

                    b.Navigation("TeacherRatings");

                    b.Navigation("Teachings");
                });
#pragma warning restore 612, 618
        }
    }
}
