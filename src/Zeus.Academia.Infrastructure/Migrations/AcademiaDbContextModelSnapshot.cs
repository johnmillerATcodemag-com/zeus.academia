// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Zeus.Academia.Infrastructure.Data;

#nullable disable

namespace Zeus.Academia.Infrastructure.Migrations
{
    [DbContext(typeof(AcademiaDbContext))]
    partial class AcademiaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Academic", b =>
                {
                    b.Property<int>("EmpNr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmpNr"));

                    b.Property<string>("AcademicType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("EmpNr");

                    b.HasIndex("Name");

                    b.HasIndex("PhoneNumber");

                    b.ToTable("Academics");

                    b.HasDiscriminator<string>("AcademicType").HasValue("Academic");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.AcademicDegree", b =>
                {
                    b.Property<int>("AcademicEmpNr")
                        .HasColumnType("int");

                    b.Property<string>("DegreeCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UniversityCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateObtained")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AcademicEmpNr", "DegreeCode", "UniversityCode");

                    b.HasIndex("DegreeCode");

                    b.HasIndex("UniversityCode");

                    b.ToTable("AcademicDegrees");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.AccessLevel", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("CanAccessFacultyRecords")
                        .HasColumnType("bit");

                    b.Property<bool>("CanAccessFinancial")
                        .HasColumnType("bit");

                    b.Property<bool>("CanAccessStudentRecords")
                        .HasColumnType("bit");

                    b.Property<bool>("CanCreate")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("CanExecute")
                        .HasColumnType("bit");

                    b.Property<bool>("CanGenerateReports")
                        .HasColumnType("bit");

                    b.Property<bool>("CanModifySystem")
                        .HasColumnType("bit");

                    b.Property<bool>("CanRead")
                        .HasColumnType("bit");

                    b.Property<bool>("CanUpdate")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("Level")
                        .HasColumnType("int");

                    b.Property<int?>("MaxConcurrentSessions")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PasswordChangeFrequencyDays")
                        .HasColumnType("int");

                    b.Property<bool>("RequiresPasswordChange")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresTwoFactor")
                        .HasColumnType("bit");

                    b.Property<int?>("SessionTimeoutMinutes")
                        .HasColumnType("int");

                    b.Property<string>("SpecialPermissions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Code");

                    b.HasIndex("Category");

                    b.HasIndex("IsActive");

                    b.HasIndex("Level");

                    b.HasIndex("Category", "Level");

                    b.ToTable("AccessLevels", t =>
                        {
                            t.HasCheckConstraint("CK_AccessLevel_Level", "Level >= 1 AND Level <= 100 OR Level IS NULL");

                            t.HasCheckConstraint("CK_AccessLevel_Sessions", "MaxConcurrentSessions >= 1 OR MaxConcurrentSessions IS NULL");
                        });
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Building", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BuildingManager")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BuildingType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("ConstructionYear")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EmergencyContact")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("HasElevator")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAccessible")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("NumberOfFloors")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("TotalAreaSqFt")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Code");

                    b.HasIndex("BuildingType");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.ToTable("Buildings", t =>
                        {
                            t.HasCheckConstraint("CK_Building_Area", "TotalAreaSqFt >= 0 OR TotalAreaSqFt IS NULL");

                            t.HasCheckConstraint("CK_Building_Floors", "NumberOfFloors >= 1 OR NumberOfFloors IS NULL");
                        });
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Chair", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("AcademicEmpNr")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AppointmentEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AppointmentStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Name");

                    b.HasIndex("AcademicEmpNr");

                    b.HasIndex("DepartmentName");

                    b.ToTable("Chairs");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Committee", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Name");

                    b.ToTable("Committees");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.CommitteeMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicEmpNr")
                        .HasColumnType("int");

                    b.Property<string>("CommitteeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProfessorEmpNr")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TeachingProfEmpNr")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicEmpNr");

                    b.HasIndex("CommitteeName");

                    b.HasIndex("ProfessorEmpNr");

                    b.HasIndex("TeachingProfEmpNr");

                    b.ToTable("CommitteeMembers");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Degree", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("DurationYears")
                        .HasColumnType("decimal(3,1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("MinimumGPA")
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PrimaryDepartment")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Specialization")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TotalCreditHours")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("IsActive");

                    b.HasIndex("Level");

                    b.HasIndex("Level", "PrimaryDepartment");

                    b.ToTable("Degrees", t =>
                        {
                            t.HasCheckConstraint("CK_Degree_MinimumGPA", "MinimumGPA >= 1.0 AND MinimumGPA <= 4.0 OR MinimumGPA IS NULL");
                        });
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Department", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<decimal?>("Budget")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("EstablishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("HeadEmpNr")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Name");

                    b.HasIndex("EstablishedDate");

                    b.HasIndex("HeadEmpNr");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Extension", b =>
                {
                    b.Property<string>("Number")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("AllowsForwarding")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("HasVoicemail")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("InstallationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastServiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OperatingHours")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrimaryContact")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<int?>("ResponsibleEmployeeNr")
                        .HasColumnType("int");

                    b.Property<string>("SpecialInstructions")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Number");

                    b.HasIndex("Department");

                    b.HasIndex("IsActive");

                    b.HasIndex("ResponsibleEmployeeNr");

                    b.HasIndex("Type");

                    b.ToTable("Extensions");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Rank", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("AllowsResearch")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowsTeaching")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("Level")
                        .HasColumnType("int");

                    b.Property<decimal?>("MaxSalary")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("MinDegreeLevel")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("MinExperienceYears")
                        .HasColumnType("int");

                    b.Property<decimal?>("MinSalary")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RequiresTenure")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Code");

                    b.HasIndex("Category");

                    b.HasIndex("IsActive");

                    b.HasIndex("Level");

                    b.HasIndex("Category", "Level");

                    b.ToTable("Ranks", t =>
                        {
                            t.HasCheckConstraint("CK_Rank_SalaryRange", "MinSalary <= MaxSalary OR MinSalary IS NULL OR MaxSalary IS NULL");
                        });
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Room", b =>
                {
                    b.Property<string>("Number")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("BuildingCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal?>("AreaSqFt")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("BookingNotes")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FloorNumber")
                        .HasColumnType("int");

                    b.Property<bool>("HasAVEquipment")
                        .HasColumnType("bit");

                    b.Property<bool>("HasComputerAccess")
                        .HasColumnType("bit");

                    b.Property<bool>("HasProjector")
                        .HasColumnType("bit");

                    b.Property<bool>("HasWhiteboard")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAccessible")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastMaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MaintenanceNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SpecialEquipment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Number", "BuildingCode");

                    b.HasIndex("FloorNumber");

                    b.HasIndex("IsActive");

                    b.HasIndex("Type");

                    b.HasIndex("BuildingCode", "Type");

                    b.ToTable("Rooms", t =>
                        {
                            t.HasCheckConstraint("CK_Room_Capacity", "Capacity >= 1 OR Capacity IS NULL");
                        });
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.StudentEnrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcademicYear")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Grade")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Semester")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StudentEmpNr")
                        .HasColumnType("int");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("SubjectCode");

                    b.HasIndex("StudentEmpNr", "SubjectCode", "Semester", "AcademicYear");

                    b.ToTable("StudentEnrollments");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Subject", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreditHours")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Level")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("MaxEnrollment")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Prerequisites")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TypicalSemester")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Code");

                    b.HasIndex("IsActive");

                    b.HasIndex("Level");

                    b.HasIndex("Title");

                    b.HasIndex("DepartmentName", "Level");

                    b.ToTable("Subjects", t =>
                        {
                            t.HasCheckConstraint("CK_Subject_CreditHours", "CreditHours >= 1 AND CreditHours <= 12 OR CreditHours IS NULL");
                        });
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.TeacherRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicEmpNr")
                        .HasColumnType("int");

                    b.Property<int?>("AcademicYear")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RatingSource")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int");

                    b.Property<string>("Semester")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SubjectCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("TeacherEmpNr")
                        .HasColumnType("int");

                    b.Property<int?>("TeachingProfEmpNr")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicEmpNr");

                    b.HasIndex("SubjectCode");

                    b.HasIndex("TeacherEmpNr");

                    b.HasIndex("TeachingProfEmpNr");

                    b.ToTable("TeacherRatings");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Teaching", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicEmpNr")
                        .HasColumnType("int");

                    b.Property<int?>("AcademicYear")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EnrollmentCount")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProfessorEmpNr")
                        .HasColumnType("int");

                    b.Property<string>("Semester")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("TeacherEmpNr")
                        .HasColumnType("int");

                    b.Property<int?>("TeachingProfEmpNr")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorEmpNr");

                    b.HasIndex("SubjectCode");

                    b.HasIndex("TeacherEmpNr");

                    b.HasIndex("TeachingProfEmpNr");

                    b.HasIndex("AcademicEmpNr", "SubjectCode", "Semester", "AcademicYear");

                    b.ToTable("Teachings");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.University", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("AccreditationStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("EstablishedYear")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("StateProvince")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("StudentEnrollment")
                        .HasColumnType("int");

                    b.Property<string>("UniversityType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Website")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Code");

                    b.HasIndex("Country");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.HasIndex("Country", "StateProvince", "City");

                    b.ToTable("Universities", t =>
                        {
                            t.HasCheckConstraint("CK_University_StudentEnrollment", "StudentEnrollment >= 0 OR StudentEnrollment IS NULL");
                        });
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Professor", b =>
                {
                    b.HasBaseType("Zeus.Academia.Infrastructure.Entities.Academic");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool?>("HasTenure")
                        .HasColumnType("bit");

                    b.Property<string>("RankCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ResearchArea")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasIndex("DepartmentName");

                    b.HasIndex("RankCode");

                    b.HasDiscriminator().HasValue("Professor");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Student", b =>
                {
                    b.HasBaseType("Zeus.Academia.Infrastructure.Entities.Academic");

                    b.Property<string>("DegreeCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpectedGraduationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("GPA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Program")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StudentId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("YearOfStudy")
                        .HasColumnType("int");

                    b.HasIndex("DegreeCode");

                    b.HasIndex("DepartmentName");

                    b.ToTable("Academics", t =>
                        {
                            t.Property("DepartmentName")
                                .HasColumnName("Student_DepartmentName");
                        });

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Teacher", b =>
                {
                    b.HasBaseType("Zeus.Academia.Infrastructure.Entities.Academic");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("EmploymentType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("MaxCourseLoad")
                        .HasColumnType("int");

                    b.Property<string>("Specialization")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasIndex("DepartmentName");

                    b.ToTable("Academics", t =>
                        {
                            t.Property("DepartmentName")
                                .HasColumnName("Teacher_DepartmentName");
                        });

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.TeachingProf", b =>
                {
                    b.HasBaseType("Zeus.Academia.Infrastructure.Entities.Academic");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("EmploymentType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("HasTenure")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxCourseLoad")
                        .HasColumnType("int");

                    b.Property<string>("RankCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ResearchArea")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("ResearchPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Specialization")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("TeachingPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("DepartmentName");

                    b.HasIndex("RankCode");

                    b.ToTable("Academics", t =>
                        {
                            t.Property("DepartmentName")
                                .HasColumnName("TeachingProf_DepartmentName");

                            t.Property("EmploymentType")
                                .HasColumnName("TeachingProf_EmploymentType");

                            t.Property("HasTenure")
                                .HasColumnName("TeachingProf_HasTenure");

                            t.Property("MaxCourseLoad")
                                .HasColumnName("TeachingProf_MaxCourseLoad");

                            t.Property("RankCode")
                                .HasColumnName("TeachingProf_RankCode");

                            t.Property("ResearchArea")
                                .HasColumnName("TeachingProf_ResearchArea");

                            t.Property("Specialization")
                                .HasColumnName("TeachingProf_Specialization");
                        });

                    b.HasDiscriminator().HasValue("TeachingProf");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.AcademicDegree", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Academic")
                        .WithMany("AcademicDegrees")
                        .HasForeignKey("AcademicEmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Degree", "Degree")
                        .WithMany("AcademicDegrees")
                        .HasForeignKey("DegreeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.University", "University")
                        .WithMany("AcademicDegrees")
                        .HasForeignKey("UniversityCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Academic");

                    b.Navigation("Degree");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Chair", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Academic")
                        .WithMany()
                        .HasForeignKey("AcademicEmpNr")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Department", "Department")
                        .WithMany("Chairs")
                        .HasForeignKey("DepartmentName")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Academic");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.CommitteeMember", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Academic")
                        .WithMany()
                        .HasForeignKey("AcademicEmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Committee", "Committee")
                        .WithMany("Members")
                        .HasForeignKey("CommitteeName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Professor", null)
                        .WithMany("CommitteeMembers")
                        .HasForeignKey("ProfessorEmpNr");

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.TeachingProf", null)
                        .WithMany("CommitteeMembers")
                        .HasForeignKey("TeachingProfEmpNr");

                    b.Navigation("Academic");

                    b.Navigation("Committee");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Department", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Head")
                        .WithMany()
                        .HasForeignKey("HeadEmpNr")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Head");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Extension", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "ResponsibleEmployee")
                        .WithMany()
                        .HasForeignKey("ResponsibleEmployeeNr")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ResponsibleEmployee");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Room", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Building", "Building")
                        .WithMany("Rooms")
                        .HasForeignKey("BuildingCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.StudentEnrollment", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentEmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Subject", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Department", "Department")
                        .WithMany("Subjects")
                        .HasForeignKey("DepartmentName")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.TeacherRating", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Academic")
                        .WithMany()
                        .HasForeignKey("AcademicEmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectCode")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Teacher", null)
                        .WithMany("TeacherRatings")
                        .HasForeignKey("TeacherEmpNr");

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.TeachingProf", null)
                        .WithMany("TeacherRatings")
                        .HasForeignKey("TeachingProfEmpNr");

                    b.Navigation("Academic");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Teaching", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Academic", "Academic")
                        .WithMany()
                        .HasForeignKey("AcademicEmpNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Professor", null)
                        .WithMany("Teachings")
                        .HasForeignKey("ProfessorEmpNr");

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Subject", "Subject")
                        .WithMany("Teachings")
                        .HasForeignKey("SubjectCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Teacher", null)
                        .WithMany("Teachings")
                        .HasForeignKey("TeacherEmpNr");

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.TeachingProf", null)
                        .WithMany("Teachings")
                        .HasForeignKey("TeachingProfEmpNr");

                    b.Navigation("Academic");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Professor", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Department", "Department")
                        .WithMany("Professors")
                        .HasForeignKey("DepartmentName")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Rank", "Rank")
                        .WithMany("Professors")
                        .HasForeignKey("RankCode")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Student", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Degree", "Degree")
                        .WithMany("Students")
                        .HasForeignKey("DegreeCode")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentName")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Degree");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Teacher", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Department", "Department")
                        .WithMany("Teachers")
                        .HasForeignKey("DepartmentName")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.TeachingProf", b =>
                {
                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Department", "Department")
                        .WithMany("TeachingProfs")
                        .HasForeignKey("DepartmentName")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Zeus.Academia.Infrastructure.Entities.Rank", "Rank")
                        .WithMany("TeachingProfs")
                        .HasForeignKey("RankCode")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Department");

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Academic", b =>
                {
                    b.Navigation("AcademicDegrees");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Building", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Committee", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Degree", b =>
                {
                    b.Navigation("AcademicDegrees");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Department", b =>
                {
                    b.Navigation("Chairs");

                    b.Navigation("Professors");

                    b.Navigation("Students");

                    b.Navigation("Subjects");

                    b.Navigation("Teachers");

                    b.Navigation("TeachingProfs");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Rank", b =>
                {
                    b.Navigation("Professors");

                    b.Navigation("TeachingProfs");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Subject", b =>
                {
                    b.Navigation("Teachings");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.University", b =>
                {
                    b.Navigation("AcademicDegrees");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Professor", b =>
                {
                    b.Navigation("CommitteeMembers");

                    b.Navigation("Teachings");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Student", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.Teacher", b =>
                {
                    b.Navigation("TeacherRatings");

                    b.Navigation("Teachings");
                });

            modelBuilder.Entity("Zeus.Academia.Infrastructure.Entities.TeachingProf", b =>
                {
                    b.Navigation("CommitteeMembers");

                    b.Navigation("TeacherRatings");

                    b.Navigation("Teachings");
                });
#pragma warning restore 612, 618
        }
    }
}
